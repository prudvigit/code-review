@AbapCatalog.sqlViewName: 'ZV_MAT_EXTENDED'
@AbapCatalog.compiler.compareFilter: true
@AccessControl.authorizationCheck: #NOT_REQUIRED
@EndUserText.label: 'Extended Material Master View'

define view Z_CDS_MAT_EXTENDED as select from mara
  inner join makt on mara.matnr = makt.matnr and makt.spras = $session.system_language
  inner join marc as marc_comp on marc_comp.matnr = mara.matnr
  left outer join eord on eord.matnr = mara.matnr and eord.werks = marc_comp.werks
  left outer join qinf on qinf.matnr = mara.matnr and qinf.werks = marc_comp.werks
  left outer join mapl on mapl.matnr = mara.matnr and mapl.werks = marc_comp.werks
  left outer join mkal on mkal.matnr = mara.matnr and mkal.werks = marc_comp.werks
  left outer join stpo on stpo.idnrk = mara.matnr
  left outer join stko on stko.stlnr = stpo.stlnr
  left outer join marc as marc_header on marc_header.matnr = stko.matnr and marc_header.werks = marc_comp.werks
  // Joins for vendor info record check
  left outer join eina on eina.lifnr = eord.lifnr and eina.matnr = mara.matnr
  left outer join eine on eine.infnr = eina.infnr and eine.werks = marc_comp.werks
{
  mara.matnr   as MaterialNumber,
  makt.maktx   as MaterialDescription,
  mara.matkl   as MaterialGroup,
  marc_comp.schgt as BulkIndicator,
  mara.mtart   as MaterialType,
  marc_comp.rgekz as BackflushIndicator,
  marc_comp.sfcpf as SchedulingProfile,
  mara.xchpf   as BatchManagement,
  marc_comp.werks as Plant,
  marc_comp.zzprodcode as ProductCode,
  mara.ersda   as CreatedOn,
  marc_comp.ersda as MarcCreatedOn,
  mara.meins   as BaseUnit,
  marc_comp.mmsta as MMStatus,
  mara.mstae   as CrossPlantStatus,
  marc_comp.beskz as ProcurementType,
  marc_comp.disgr as MRPGroup,
  marc_comp.dismm as MRPType,
  marc_comp.dispo as MRPController,
  marc_comp.ekgrp as PurchasingGroup,
  marc_comp.plifz as PlannedDeliveryTime,
  marc_comp.sobsl as SpecialProcurementType,
  marc_comp.webaz as GRProcessingTime,
  marc_comp.minbe as MinimumLotSize,
  marc_comp.bstmi as FixedLotSize,
  marc_comp.bstma as FixedLotSizeMax,
  marc_comp.wzeit as InHouseProductionTime,
  mara.raube   as StorageConditions,
  mara.qmpur   as QMInProcurement,
  marc_comp.disls as LotSizeProcedure,
  marc_comp.sbdkz as IndividualCollectiveIndicator,
  marc_comp.strgr as StrategyGroup,
  marc_comp.ssqss as QuotaArrangementUsage,
  marc_comp.vrmod as ConsumptionMode,
  marc_comp.vint1 as ForwardConsumptionPeriod,
  marc_comp.vint2 as BackwardConsumptionPeriod,
  marc_comp.bstrf as PlanningStrategyIndicator,
  marc_comp.fvidk as ForecastIndicator,
  mara.ntgew   as NetWeight,
  mara.gewei   as WeightUnit,
  marc_comp.dzeit as SchedulingMarginKey,
  marc_comp.mabst as AvailabilityCheck,
  marc_comp.lgfsb as IssueStorageLocation,
  marc_comp.lgpro as ProductionStorageLocation,

  eord.lifnr   as SourceListVendor,
  eord.flifn   as FixedVendor,
  eord.febel   as DeliveryBlock,
  eord.vrtyp   as ProcurementTypeSourceList,

  // Vendor-Info Record Flag: Y if FLIFN exists and EINA/EINE entries exist; '#' if no FLIFN; N if FLIFN exists but no entries
  case
    when eord.flifn <> '' and eina.infnr is not null and eine.infnr is not null then 'Y'
    when eord.flifn = '' then '#'
    when eord.flifn <> '' and (eina.infnr is null or eine.infnr is null) then 'N'
    else ''
  end as VendorInfoFlag,

  qinf.lieferant as QInfoRecordVendor,
  qinf.werks   as QInfoPlant,
  qinf.loekz   as QInfoDeletionFlag,

  mapl.werks   as MaplPlant,
  mapl.plnty   as TaskListType,
  mapl.loekz   as MaplDeletionFlag,

  mkal.werks   as MkalPlant,
  mkal.matnr   as MkalMaterial,
  mkal.verid   as ProductionVersion,
  mkal.elpro   as ExplosionIndicator,
  mkal.alort   as IssueStorageLocationPV,
  mkal.text1   as ProductionVersionText,
  mkal.stlal   as BOMAlternative,
  mkal.alnal   as RoutingAlternative,

  // Bulk material rule: X if type = ZPRR
  case
    when mara.mtart = 'ZPRR' then 'X'
    else ''
  end as schgt_rule,

  // Bulk error: if BulkIndicator manually X but type <> ZPRR
  case
    when marc_comp.schgt = 'X' and mara.mtart <> 'ZPRR' then 'Error: BULK'
    else ''
  end as bulk_error,

  // Backflush Rule Logic
  case
    when marc_header.sfcpf = 'Z00001' and mara.xchpf <> 'X' then 'X'
    else ''
  end as backflush_check,

  case
    when marc_header.sfcpf = 'Z00001' and mara.xchpf = 'X' then 'Error: BACKFLUSH'
    else ''
  end as backflush_error

}
